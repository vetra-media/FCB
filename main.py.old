print("Importing database...")
from database import (
    init_user_db, 
    get_user_balance, 
    spend_fcb_token, 
    add_fcb_tokens, 
    check_rate_limit_with_fcb
)
print("database imported")

print("Importing config...")
from config import (
    BOT_TOKEN, COINGECKO_API_KEY, COINGECKO_API, BROADCAST_CHAT_ID,
    RATE_LIMIT_SECONDS, FOMO_SCAN_INTERVAL, MAX_COINS_PER_PAGE, 
    TOP_N_TO_EXCLUDE, COIN_SYMBOL_OVERRIDES, STABLECOIN_SYMBOLS,
    FCB_STAR_PACKAGES, FOMO_CACHE, CACHE_BACK_INTERVAL,
    INSTANT_RESPONSES, INSTANT_SPIN_RESPONSES, HISTORY_LOG,
    validate_config
)
print("config imported")

print("Importing api_client...")
from api_client import (
    get_optimized_session, OptimizedRateLimiter, BatchProcessor,
    fetch_market_data_ultra_fast, fetch_ohlcv_data_ultra_fast,
    fetch_ticker_data_ultra_fast, fetch_coin_data_ultra_fast,
    get_coin_info_ultra_fast, fetch_ohlcv_data, fetch_from_coingecko,
    get_coin_info, fuzzy_find_coin, batch_processor, rate_limiter,
    cleanup_session
)
print("api_client imported")

print("Importing analysis...")
from analysis import calculate_fomo_status_ultra_fast
print("analysis imported")

print("Importing scanner...")
from scanner import periodic_fomo_scan, send_weekly_winners_update
print("scanner imported")

print("Importing handlers...")
try:
    from handlers import setup_handlers
    print("handlers imported")
except ImportError as e:
    print(f"Handlers import error: {e}")
    print("Starting with basic bot functionality...")
    
    # Enhanced fallback handler setup
    def setup_handlers(application):
        """Enhanced fallback handler setup"""
        from telegram.ext import CommandHandler, MessageHandler, filters
        from telegram import Update
        from telegram.ext import ContextTypes
        
        async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            username = update.effective_user.username or "Unknown"
            print(f"🔍 START command received from user {user_id} (@{username})")
            
            try:
                await update.message.reply_text(
                    "🤖 **FCB FOMO Bot is LIVE!**\n\n"
                    "✅ Analysis system: ACTIVE\n"
                    "🎮 Gaming mode: READY\n"  
                    "🛡️ Zero results: IMPOSSIBLE\n"
                    "🔥 TRON filtering: WORKING\n\n"
                    "🚀 **Bot is fully operational!**",
                    parse_mode='Markdown'
                )
                print(f"✅ START response sent to user {user_id}")
                
            except Exception as e:
                print(f"❌ START error: {e}")
                # Fallback without markdown
                try:
                    await update.message.reply_text("🤖 FCB FOMO Bot is running! All systems operational.")
                except Exception as e2:
                    print(f"❌ Fallback START error: {e2}")
        
        async def test_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """Test the analysis system"""
            print(f"🔍 TEST command received from user {update.effective_user.id}")
            
            # Test with Bitcoin
            test_coin = {
                'symbol': 'BTC',
                'price': 43000,
                'volume': 20000000000,
                'change_1h': 1.2,
                'change_24h': 3.5,
                'market_cap': 850000000000
            }
            
            try:
                result = await calculate_fomo_status_ultra_fast(test_coin)
                score, signal, trend, distribution, volume_spike = result
                
                await update.message.reply_text(
                    f"🧪 **Analysis Test**\n\n"
                    f"🪙 **Bitcoin (BTC)**\n"
                    f"📊 **FOMO Score**: {score}%\n"
                    f"🎯 **Signal**: {signal}\n"
                    f"📈 **Trend**: {trend}\n"
                    f"💧 **Volume**: {volume_spike:.1f}x\n\n"
                    f"✅ **Analysis system working perfectly!**",
                    parse_mode='Markdown'
                )
                print(f"✅ TEST response sent to user {update.effective_user.id}")
            except Exception as e:
                await update.message.reply_text(f"❌ Analysis test failed: {e}")
                print(f"❌ Analysis test error: {e}")
        
        async def debug_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """Debug any message"""
            user_id = update.effective_user.id
            message_text = update.message.text
            print(f"🔍 Message from {user_id}: '{message_text}'")
            
            await update.message.reply_text(
                f"🔍 **Debug Response**\n\n"
                f"📨 Your message: `{message_text}`\n"
                f"👤 User ID: `{user_id}`\n"
                f"✅ Bot is receiving messages!\n\n"
                f"Try: /start or /test",
                parse_mode='Markdown'
            )
        
        # Add handlers
        print("🔧 Adding command handlers...")
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("test", test_analysis))
        
        print("🔧 Adding message handler...")
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, debug_message))
        
        print("✅ All handlers registered successfully")
        return application
    
    print("Enhanced handlers created")

import os
import logging
from dotenv import load_dotenv
from telegram.ext import Application

# Load environment variables
load_dotenv()

print("=== STARTING FCB FOMO BOT ===")

# Setup logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def main():
    """Simplified main function using the working sync approach"""
    print("🚀 Starting FCB FOMO Bot...")
    
    try:
        # Validate configuration
        validate_config()
        print("✅ Configuration validated")
    except Exception as e:
        print(f"❌ Config validation failed: {e}")
        return
    
    try:
        # Initialize database
        init_user_db()
        print("✅ Database initialized")
    except Exception as e:
        print(f"❌ Database init failed: {e}")
        return
    
    try:
        # Build bot application
        token = os.getenv("TEST_BOT_TOKEN") if os.getenv("TEST_MODE") == "True" else BOT_TOKEN
        print(f"🔑 Using token: {token[:20]}...")
        
        app = Application.builder().token(token).build()
        
        # Setup handlers
        print("🔧 Setting up handlers...")
        setup_handlers(app)
        
        print("✅ Telegram app built and handlers setup")
        print(f"✅ Bot ready! Chat ID: {BROADCAST_CHAT_ID}")
        print(f"🔑 Using CoinGecko Pro API: {COINGECKO_API_KEY[:8]}...")
        
        # Start the bot
        print("🚀 Starting bot polling...")
        print("=" * 50)
        print("🎯 Bot is now LIVE and listening!")
        print("📱 Go to Telegram and send: /start")
        print("🧪 Test analysis with: /test")
        print("🔍 Any other message will show debug info")
        print("=" * 50)
        
        # Run polling (this handles everything automatically)
        app.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        print(f"❌ Bot startup failed: {e}")
        logger.error(f"Bot startup failed: {e}", exc_info=True)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n🛑 Bot stopped by user")
    except Exception as e:
        print(f"❌ Fatal error: {e}")
        logger.error(f"Fatal error: {e}", exc_info=True)